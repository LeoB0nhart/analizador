/* The following code was generated by JFlex 1.4.3 on 24/02/20 06:57 PM */

package control;
import static control.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/02/20 06:57 PM from the specification file
 * <tt>C:/Users/bondy/Documents/NetBeansProjects/Automatas/src/control/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\33\2\0\1\3\22\0\1\50\1\43\4\0\1\41"+
    "\1\47\1\45\1\46\1\37\1\35\1\3\1\36\1\52\1\32\12\2"+
    "\1\51\1\51\1\42\1\34\1\42\2\0\2\1\1\1\14\1\1\1"+
    "\1\1\1\1\1\44\7\1\4\0\1\1\1\0\1\16\1\17\1\13"+
    "\1\22\1\6\1\5\1\27\1\21\1\4\1\1\1\26\1\7\1\31"+
    "\1\12\1\15\1\24\1\1\1\20\1\10\1\14\1\11\1\30\1\25"+
    "\1\23\2\1\1\51\1\40\1\51\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\16\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\1\1\2"+
    "\2\15\1\1\1\16\30\2\1\4\1\14\1\17\1\20"+
    "\1\2\2\0\1\21\27\2\1\0\1\22\16\2\1\3"+
    "\20\2\3\0\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\53"+
    "\0\53\0\53\0\u035c\0\u035c\0\u03dd\0\u0408\0\53\0\u0433"+
    "\0\126\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560"+
    "\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8"+
    "\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810"+
    "\0\u083b\0\u0866\0\53\0\53\0\53\0\u0891\0\u08bc\0\u08e7"+
    "\0\126\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14"+
    "\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c"+
    "\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4"+
    "\0\u0cef\0\53\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1"+
    "\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49"+
    "\0\53\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076"+
    "\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce"+
    "\0\u11f9\0\u1224\0\u124f\0\u127a\0\53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\3\1\12\1\13\1\14\1\3\1\15\1\16"+
    "\1\17\1\3\1\20\1\3\1\21\1\22\2\3\1\23"+
    "\1\3\1\24\1\5\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\5"+
    "\1\37\1\2\54\0\2\3\1\0\26\3\12\0\1\3"+
    "\10\0\1\4\53\0\1\5\27\0\1\5\14\0\1\5"+
    "\3\0\2\3\1\0\1\3\1\41\4\3\1\42\17\3"+
    "\12\0\1\3\7\0\2\3\1\0\1\43\4\3\1\44"+
    "\3\3\1\45\1\46\13\3\12\0\1\3\7\0\2\3"+
    "\1\0\3\3\1\47\13\3\1\50\6\3\12\0\1\3"+
    "\7\0\2\3\1\0\5\3\1\51\13\3\1\52\4\3"+
    "\12\0\1\3\7\0\2\3\1\0\2\3\1\53\2\3"+
    "\1\54\20\3\12\0\1\3\7\0\2\3\1\0\11\3"+
    "\1\55\1\56\2\3\1\57\10\3\12\0\1\3\7\0"+
    "\2\3\1\0\14\3\1\60\1\61\10\3\12\0\1\3"+
    "\7\0\2\3\1\0\13\3\1\62\12\3\12\0\1\3"+
    "\7\0\2\3\1\0\11\3\1\63\14\3\12\0\1\3"+
    "\7\0\2\3\1\0\2\3\1\64\23\3\12\0\1\3"+
    "\7\0\2\3\1\0\2\3\1\65\6\3\1\66\14\3"+
    "\12\0\1\3\7\0\2\3\1\0\12\3\1\67\13\3"+
    "\12\0\1\3\7\0\2\3\1\0\15\3\1\70\10\3"+
    "\12\0\1\3\7\0\2\3\1\0\11\3\1\71\14\3"+
    "\12\0\1\3\40\0\1\72\54\0\1\73\53\0\1\74"+
    "\53\0\1\75\15\0\2\3\1\0\10\3\1\76\15\3"+
    "\12\0\1\3\44\0\1\77\15\0\1\100\2\0\26\100"+
    "\12\0\1\100\7\0\2\3\1\0\10\3\1\101\15\3"+
    "\12\0\1\3\7\0\2\3\1\0\6\3\1\102\17\3"+
    "\12\0\1\3\7\0\2\3\1\0\6\3\1\103\17\3"+
    "\12\0\1\3\7\0\2\3\1\0\14\3\1\41\11\3"+
    "\12\0\1\3\7\0\2\3\1\0\3\3\1\47\22\3"+
    "\12\0\1\3\7\0\2\3\1\0\4\3\1\104\21\3"+
    "\12\0\1\3\7\0\2\3\1\0\20\3\1\105\5\3"+
    "\12\0\1\3\7\0\2\3\1\0\20\3\1\106\5\3"+
    "\12\0\1\3\7\0\2\3\1\0\1\107\25\3\12\0"+
    "\1\3\7\0\2\3\1\0\21\3\1\41\4\3\12\0"+
    "\1\3\7\0\2\3\1\0\3\3\1\110\22\3\12\0"+
    "\1\3\7\0\2\3\1\0\3\3\1\111\2\3\1\112"+
    "\17\3\12\0\1\3\7\0\2\3\1\0\4\3\1\104"+
    "\3\3\1\113\15\3\12\0\1\3\7\0\2\3\1\0"+
    "\12\3\1\114\13\3\12\0\1\3\7\0\2\3\1\0"+
    "\5\3\1\104\20\3\12\0\1\3\7\0\2\3\1\0"+
    "\1\115\25\3\12\0\1\3\7\0\2\3\1\0\4\3"+
    "\1\116\21\3\12\0\1\3\7\0\2\3\1\0\11\3"+
    "\1\117\14\3\12\0\1\3\7\0\2\3\1\0\10\3"+
    "\1\120\15\3\12\0\1\3\7\0\2\3\1\0\1\3"+
    "\1\121\1\3\1\122\22\3\12\0\1\3\7\0\2\3"+
    "\1\0\5\3\1\123\1\3\1\124\16\3\12\0\1\3"+
    "\7\0\2\3\1\0\7\3\1\125\16\3\12\0\1\3"+
    "\7\0\2\3\1\0\1\126\25\3\12\0\1\3\7\0"+
    "\2\3\1\0\1\127\25\3\12\0\1\3\6\0\33\72"+
    "\1\0\17\72\1\0\2\3\1\0\14\3\1\130\11\3"+
    "\12\0\1\3\10\0\1\131\51\0\1\100\2\0\26\100"+
    "\12\0\1\100\2\0\1\132\1\100\3\0\2\3\1\0"+
    "\12\3\1\110\13\3\12\0\1\3\7\0\2\3\1\0"+
    "\7\3\1\133\16\3\12\0\1\3\7\0\2\3\1\0"+
    "\2\3\1\41\23\3\12\0\1\3\7\0\2\3\1\0"+
    "\11\3\1\134\14\3\12\0\1\3\7\0\2\3\1\0"+
    "\2\3\1\45\23\3\12\0\1\3\7\0\2\3\1\0"+
    "\10\3\1\113\15\3\12\0\1\3\7\0\2\3\1\0"+
    "\3\3\1\41\22\3\12\0\1\3\7\0\2\3\1\0"+
    "\4\3\1\135\21\3\12\0\1\3\7\0\2\3\1\0"+
    "\4\3\1\136\21\3\12\0\1\3\7\0\2\3\1\0"+
    "\7\3\1\137\16\3\12\0\1\3\7\0\2\3\1\0"+
    "\14\3\1\101\11\3\12\0\1\3\7\0\2\3\1\0"+
    "\4\3\1\41\21\3\12\0\1\3\7\0\2\3\1\0"+
    "\10\3\1\140\15\3\12\0\1\3\7\0\2\3\1\0"+
    "\3\3\1\141\22\3\12\0\1\3\7\0\2\3\1\0"+
    "\5\3\1\142\20\3\12\0\1\3\7\0\2\3\1\0"+
    "\12\3\1\143\13\3\12\0\1\3\7\0\2\3\1\0"+
    "\2\3\1\144\23\3\12\0\1\3\7\0\2\3\1\0"+
    "\13\3\1\145\12\3\12\0\1\3\7\0\2\3\1\0"+
    "\5\3\1\146\20\3\12\0\1\3\7\0\2\3\1\0"+
    "\22\3\1\147\3\3\12\0\1\3\7\0\2\3\1\0"+
    "\3\3\1\104\22\3\12\0\1\3\7\0\2\3\1\0"+
    "\16\3\1\41\7\3\12\0\1\3\7\0\2\3\1\0"+
    "\1\150\25\3\12\0\1\3\10\0\1\131\43\0\1\151"+
    "\5\0\2\3\1\0\10\3\1\152\15\3\12\0\1\3"+
    "\7\0\2\3\1\0\14\3\1\136\11\3\12\0\1\3"+
    "\7\0\2\3\1\0\11\3\1\153\14\3\12\0\1\3"+
    "\7\0\2\3\1\0\10\3\1\41\15\3\12\0\1\3"+
    "\7\0\2\3\1\0\15\3\1\41\10\3\12\0\1\3"+
    "\7\0\2\3\1\0\14\3\1\154\11\3\12\0\1\3"+
    "\7\0\2\3\1\0\2\3\1\155\23\3\12\0\1\3"+
    "\7\0\2\3\1\0\14\3\1\156\11\3\12\0\1\3"+
    "\7\0\2\3\1\0\5\3\1\157\20\3\12\0\1\3"+
    "\7\0\2\3\1\0\10\3\1\104\15\3\12\0\1\3"+
    "\7\0\2\3\1\0\3\3\1\160\22\3\12\0\1\3"+
    "\7\0\2\3\1\0\25\3\1\161\12\0\1\3\7\0"+
    "\2\3\1\0\12\3\1\162\13\3\12\0\1\3\7\0"+
    "\2\3\1\0\6\3\1\163\17\3\12\0\1\3\7\0"+
    "\2\3\1\0\1\164\25\3\12\0\1\3\7\0\2\3"+
    "\1\0\3\3\1\165\22\3\12\0\1\3\7\0\2\3"+
    "\1\0\12\3\1\166\13\3\12\0\1\3\7\0\2\3"+
    "\1\0\12\3\1\167\13\3\12\0\1\3\7\0\2\3"+
    "\1\0\6\3\1\41\17\3\12\0\1\3\7\0\2\3"+
    "\1\0\3\3\1\136\22\3\12\0\1\3\7\0\2\3"+
    "\1\0\2\3\1\101\23\3\12\0\1\3\7\0\2\3"+
    "\1\0\2\3\1\170\23\3\12\0\1\3\7\0\2\3"+
    "\1\0\23\3\1\104\2\3\12\0\1\3\7\0\2\3"+
    "\1\0\23\3\1\101\2\3\12\0\1\3\7\0\2\3"+
    "\1\0\11\3\1\156\14\3\12\0\1\3\7\0\2\3"+
    "\1\0\2\3\1\171\23\3\12\0\1\3\7\0\2\3"+
    "\1\0\7\3\1\136\16\3\12\0\1\3\7\0\2\3"+
    "\1\0\6\3\1\101\17\3\12\0\1\3\7\0\2\3"+
    "\1\0\6\3\1\136\17\3\12\0\1\3\7\0\2\3"+
    "\1\0\26\3\12\0\1\3\5\0\1\172\7\0\1\173"+
    "\60\0\1\174\64\0\1\175\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4773];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\3\11\4\1\1\11\33\1\3\11"+
    "\1\1\2\0\30\1\1\0\1\11\16\1\1\11\20\1"+
    "\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { ; return Salida;
          }
        case 20: break;
        case 6: 
          { return Asignacion;
          }
        case 21: break;
        case 17: 
          { lexeme=yytext(); return TipoDeDato;
          }
        case 22: break;
        case 18: 
          { lexeme=yytext(); return Cadena;
          }
        case 23: break;
        case 9: 
          { return Multiplicacion;
          }
        case 24: break;
        case 7: 
          { return Suma;
          }
        case 25: break;
        case 11: 
          { return AND;
          }
        case 26: break;
        case 15: 
          { ; return Incremento;
          }
        case 27: break;
        case 10: 
          { return OR;
          }
        case 28: break;
        case 5: 
          { return Division;
          }
        case 29: break;
        case 8: 
          { return Resta;
          }
        case 30: break;
        case 12: 
          { ; return OperadorRelacional;
          }
        case 31: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 32: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 33: break;
        case 1: 
          { return ERROR;
          }
        case 34: break;
        case 4: 
          { /*Ignore*/
          }
        case 35: break;
        case 13: 
          { lexeme=yytext(); return CaracterEspecial;
          }
        case 36: break;
        case 16: 
          { ; return Decremento;
          }
        case 37: break;
        case 14: 
          { lexeme=yytext(); return Reservadas;
          }
        case 38: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
